# This build requires ssh agent forwarding in order to be able to clone itcoin
# private repos.
#
# Before running the build, please ensure that this command returns a single
# line:
#     ssh-add -L
#     ssh-rsa PUBKEY /path/to/PRIVKEY
#
# and that the listed credentials are valid for github ssh authentication.
#
# To do the build, you'll need to build the image using a recent Docker (tested
# with 20.10.12 on Ubuntu 20.04, not working with Podman), and run in this way:
#     DOCKER_BUILDKIT=1 docker build --ssh default --file Dockerfile.fedora36 .
#
# Guide used for ssh agent forwarding:
#     https://stackoverflow.com/questions/43418188/ssh-agent-forwarding-during-docker-build#53548076

FROM fedora:36

# toolchain deps
RUN dnf install -y \
    autoconf \
    automake \
    cmake \
    g++ \
    gcc \
    git \
    jq \
    libtool \
    pkg-config \
    vim-common \
    zlib-devel

# build deps
#
# In Fedora, there are no "-devel" packages for the individual boost libraries.
# This is an exception to the usual Fedora-style packaging. Thus, the only boost
# package needed for satisfying the build requirements would be boost-devel,
# which brings in a superset of what we need.
#
# The other boost-* packages listed here are kept just for documentation of what
# would be the minimal set.
RUN dnf install -y \
    argtable-devel \
    boost-devel \
    boost-filesystem \
    boost-log \
    boost-program-options \
    boost-test \
    boost-thread \
    libcurl-devel \
    libdb-cxx-devel \
    libevent-devel \
    openssl-devel \
    sqlite-devel \
    zeromq-devel

RUN mkdir /itcoin-pbft

WORKDIR /itcoin-pbft

COPY . /itcoin-pbft

# download public key for github.com
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

RUN mkdir /itcoin-pbft/build

WORKDIR /itcoin-pbft/build

# TODO: enable ssh agent forwarding when building this container, or the build
# will fail when cloning our repos.
RUN cmake -DITCOIN_CORE_GIT_REV=disable-werror ..

# Put boost in a dedicated layer.
RUN make boost-libraries -j $(nproc --ignore=1)

# Put itcoin-core in a dedicated layer.
#
# This command will clone the itcoin-core private repo and thus needs to be run
# with ssh secrets mounted.
RUN --mount=type=ssh make itcoin-core-libraries -j $(nproc --ignore=1)

# Put swi-prolog in a dedicated layer.
RUN make swi-prolog -j $(nproc --ignore=1)

# This command will clone the itcoin-pbft private repo and thus needs to be run
# with ssh secrets mounted.
RUN --mount=type=ssh make -j $(nproc --ignore=1)
